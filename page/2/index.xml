<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>crupest 的博客</title><link>https://blog.crupest.life/</link><description>Recent content on crupest 的博客</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>crupest. 本站遵循 CC-BY-NC 4.0 协议</copyright><lastBuildDate>Fri, 15 Jan 2021 22:56:06 +0800</lastBuildDate><atom:link href="https://blog.crupest.life/index.xml" rel="self" type="application/rss+xml"/><item><title>Self Resolvable</title><link>https://blog.crupest.life/posts/self-resolvable/</link><pubDate>Sun, 30 Jun 2019 18:21:30 +0800</pubDate><guid>https://blog.crupest.life/posts/self-resolvable/</guid><description>crupest 的博客 https://blog.crupest.life/posts/self-resolvable/ -&lt;p>我实在是不知道怎么把这个东西翻译成中文。&lt;/p>
&lt;p>任何事物的发明都有其起源。最近我在写我的那个 UI 库的时候发现了一个问题：&lt;/p>
&lt;p>每当我的某个控件改变一个关系到布局的属性时，我就必须得重新 Layout，但是如果在某一个消息的处理过程中，用户改变了两个这样的属性，那么就有可能会连续 Layout 两次，很明显前一次的 Layout 是不必要的。所以我就改成了每需要 Layout 的时候，就把 layout 设成脏的，然后再投递一个事件，在下一个消息循环 Layout，这样，即使用户连续改了两个属性，Layout 的消息也只投递了一次，只会进行一次 Layout。&lt;/p>
&lt;p>这样改了之后看似没有问题，但实际上又引入了一个潜在的 bug：万一用户改了两个属性之后又立即销毁了那个需要重新 Layout 的窗口呢？虽然说，好的写法应该是用户调用 InvokeLater 在下一个消息循环销毁窗口，但你不能对用户的行为做任何假定。于是，就需要在 Layout 消息处理中在真正 Layout 之前要判断一下窗口还在不在。&lt;/p>
&lt;p>自然的去想，我就需要一个独立于窗口之外的一个变量来存储这个窗口是否被销毁了，但这样感觉很麻烦，我想把这个属性直接写到窗口里面，于是就产生了这个叫做 self-resolvable 的东西。&lt;/p>
&lt;p>大致思路就是，有这个需要的对象应该提供一个接口&lt;code>CreateResolver&lt;/code>，调用这个接口你就能获得一个&lt;code>Resolver&lt;/code>，而这个&lt;code>Resolver&lt;/code>又有一个接口&lt;code>Resolve&lt;/code>，如果对象还在，那么调用它就返回这个对象，不然就返回&lt;code>null&lt;/code>。这样会很方便，因为所有的这些都是写在对象里面的，不需要在对象外面写额外的逻辑，而且上述的情况肯定不会只出现一次，如果我们把它抽象出来，那么就能一劳永逸。&lt;/p>
&lt;p>当然，我不会是第一个产生这种想法的人。实际上很多地方已经有了这个想法和实现。&lt;/p>
&lt;p>比如 Qt，我记得 Qt 里的&lt;code>QObject&lt;/code>都有一个销毁事件，在这个对象被销毁的时候，会发出一个信号。Qt 我不是很熟悉，但是这个功能对于写 UI 来说还是很有用的。&lt;/p>
&lt;p>我不使用 Qt，但实际上，C++标准库已经有了这个想法的实现，而且功能比我说的更强大。那就是&lt;a href="https://en.cppreference.com/w/cpp/memory/enable_shared_from_this">&lt;code>std::enable_shared_from_this&lt;/code>&lt;/a>。继承了这个类之后呢，你就可以随时从一个对象上调用&lt;code>shared_from_this&lt;/code>获取一个&lt;code>shared_ptr&lt;/code>，从而保证这个对象不会被销毁。如果你想要一个弱引用，那就可以调用一个&lt;code>weak_from_this&lt;/code>来获取一个&lt;code>weak_ptr&lt;/code>，但这个功能在 C++17 以后才有。标准库的这个功能，我也不是很熟悉，也从来没用过。&lt;/p>
&lt;p>最终我还是选择自己撸一套简陋的工具，来实现我的想法。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;iostream&amp;gt; // for test output&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;cassert&amp;gt; // for assert&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;memory&amp;gt; //for shared_ptr&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">//forward declaration
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">template&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">typename&lt;/span> T&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">SelfResolvable&lt;/span>;
&lt;span style="color:#66d9ef">template&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">typename&lt;/span> T&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ObjectResolver&lt;/span> {
&lt;span style="color:#66d9ef">friend&lt;/span> SelfResolvable&lt;span style="color:#f92672">&amp;lt;&lt;/span>T&lt;span style="color:#f92672">&amp;gt;&lt;/span>;
&lt;span style="color:#66d9ef">private&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
ObjectResolver(&lt;span style="color:#66d9ef">const&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>shared_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>T&lt;span style="color:#f92672">*&amp;gt;&amp;amp;&lt;/span> resolver) &lt;span style="color:#f92672">:&lt;/span> resolver_(resolver) {}
&lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
ObjectResolver(&lt;span style="color:#66d9ef">const&lt;/span> ObjectResolver&lt;span style="color:#f92672">&amp;amp;&lt;/span>) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">default&lt;/span>;
ObjectResolver&lt;span style="color:#f92672">&amp;amp;&lt;/span> &lt;span style="color:#66d9ef">operator&lt;/span>&lt;span style="color:#f92672">=&lt;/span>(&lt;span style="color:#66d9ef">const&lt;/span> ObjectResolver&lt;span style="color:#f92672">&amp;amp;&lt;/span>) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">default&lt;/span>;
ObjectResolver(ObjectResolver&lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span>) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">default&lt;/span>;
ObjectResolver&lt;span style="color:#f92672">&amp;amp;&lt;/span> &lt;span style="color:#66d9ef">operator&lt;/span>&lt;span style="color:#f92672">=&lt;/span>(ObjectResolver&lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span>) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">default&lt;/span>;
&lt;span style="color:#f92672">~&lt;/span>ObjectResolver() &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">default&lt;/span>;
T&lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">Resolve&lt;/span>() &lt;span style="color:#66d9ef">const&lt;/span> {
&lt;span style="color:#75715e">// resolver_ is null only when this has been moved.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// You shouldn&amp;#39;t resolve a moved resolver. So assert it.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> assert(resolver_);
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">*&lt;/span>resolver_;
}
&lt;span style="color:#66d9ef">private&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
std&lt;span style="color:#f92672">::&lt;/span>shared_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>T&lt;span style="color:#f92672">*&amp;gt;&lt;/span> resolver_;
};
&lt;span style="color:#66d9ef">template&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">typename&lt;/span> T&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">SelfResolvable&lt;/span> {
&lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
SelfResolvable() &lt;span style="color:#f92672">:&lt;/span> resolver_(&lt;span style="color:#66d9ef">new&lt;/span> T&lt;span style="color:#f92672">*&lt;/span>(&lt;span style="color:#66d9ef">static_cast&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>T&lt;span style="color:#f92672">*&amp;gt;&lt;/span>(&lt;span style="color:#66d9ef">this&lt;/span>))) {}
SelfResolvable(&lt;span style="color:#66d9ef">const&lt;/span> SelfResolvable&lt;span style="color:#f92672">&amp;amp;&lt;/span>) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">delete&lt;/span>;
SelfResolvable&lt;span style="color:#f92672">&amp;amp;&lt;/span> &lt;span style="color:#66d9ef">operator&lt;/span>&lt;span style="color:#f92672">=&lt;/span>(&lt;span style="color:#66d9ef">const&lt;/span> SelfResolvable&lt;span style="color:#f92672">&amp;amp;&lt;/span>) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">delete&lt;/span>;
SelfResolvable(SelfResolvable&lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span>) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">delete&lt;/span>;
SelfResolvable&lt;span style="color:#f92672">&amp;amp;&lt;/span> &lt;span style="color:#66d9ef">operator&lt;/span>&lt;span style="color:#f92672">=&lt;/span>(SelfResolvable&lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span>) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">delete&lt;/span>;
&lt;span style="color:#66d9ef">virtual&lt;/span> &lt;span style="color:#f92672">~&lt;/span>SelfResolvable() { (&lt;span style="color:#f92672">*&lt;/span>resolver_) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">nullptr&lt;/span>; }
ObjectResolver&lt;span style="color:#f92672">&amp;lt;&lt;/span>T&lt;span style="color:#f92672">&amp;gt;&lt;/span> CreateResolver() { &lt;span style="color:#66d9ef">return&lt;/span> ObjectResolver&lt;span style="color:#f92672">&amp;lt;&lt;/span>T&lt;span style="color:#f92672">&amp;gt;&lt;/span>(resolver_); }
&lt;span style="color:#66d9ef">private&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
std&lt;span style="color:#f92672">::&lt;/span>shared_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>T&lt;span style="color:#f92672">*&amp;gt;&lt;/span> resolver_;
};
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">O&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">public&lt;/span> SelfResolvable&lt;span style="color:#f92672">&amp;lt;&lt;/span>O&lt;span style="color:#f92672">&amp;gt;&lt;/span> {};
&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">auto&lt;/span> o &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> O;
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">auto&lt;/span> resolver &lt;span style="color:#f92672">=&lt;/span> o&lt;span style="color:#f92672">-&amp;gt;&lt;/span>CreateResolver();
std&lt;span style="color:#f92672">::&lt;/span>cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> (resolver.Resolve() &lt;span style="color:#f92672">==&lt;/span> o) &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>endl;
&lt;span style="color:#66d9ef">delete&lt;/span> o;
std&lt;span style="color:#f92672">::&lt;/span>cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> (resolver.Resolve() &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nullptr&lt;/span>) &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>endl;
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>代码的核心思想，就是创建一个&lt;code>shared_ptr&amp;lt;T*&amp;gt;&lt;/code>，让所有的&lt;code>ObjectResolver&lt;/code>都保存这个&lt;code>shared_ptr&lt;/code>，而需要这个功能的类继承&lt;code>SelfResolvable&amp;lt;T&amp;gt;&lt;/code>，在构造的时候把这个&lt;code>shared_ptr&lt;/code>所包含的指针设为&lt;code>this&lt;/code>，在销毁的时候把它设为&lt;code>nullptr&lt;/code>。这样&lt;code>ObjectResolver&lt;/code>只需要通过这个指针就能获取到这个对象的存在状态以及对象本身。&lt;/p>
&lt;p>&lt;code>ObjectResolver&lt;/code>是可以随意拷贝和移动的，而且我们只需要把对应的方法设为默认就可以了，因为它只包含一个&lt;code>shared_ptr&lt;/code>成员。关键就是，在&lt;code>Resolve&lt;/code>方法里面要判断一下&lt;code>shared_ptr&lt;/code>本身是不是 null，如果是，说明这个&lt;code>ObjectResolver&lt;/code>是被移动过的，那么用户就不应该使用它，因为不能使用一个移动过的对象，这是由使用者来保证的，我们只需要加一个断言来帮助解决这个可能发生的 bug（实际上我在第一次使用时就发生了这个问题）。&lt;/p>
&lt;p>而&lt;code>SelfResolvable&lt;/code>是既不可以拷贝也不可以移动，这是我故意设置的，因为我压根就没打算让继承它的类拷贝和移动（比如窗口）。而且这个类的拷贝和移动语义设计起来也会比较复杂，因为我暂时用不上，所以就不过度设计了。&lt;/p>
&lt;p>最后有一点有趣的是，这里用到了一个叫做&lt;a href="https://en.wikipedia.org/wiki/Curiously_recurring_template_pattern">curiously recurring template pattern&lt;/a>的东西，具体的可以去看看维基，就不赘述了。&lt;/p>
&lt;h2 id="update-1">Update 1&lt;/h2>
&lt;p>修改了所有的 Typo.&lt;/p>
- https://blog.crupest.life/posts/self-resolvable/ - crupest. 本站遵循 CC-BY-NC 4.0 协议</description></item></channel></rss>